// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.versions = [
            kotlin           : "1.4.10",
            kotlinCoroutine  : '1.4.1',
            leancloudStorage : '7.2.2',
    ]

    ext.deps = [
            kotlin                : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",
            kotlinReflect         : "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}",
            kotlinCoroutineRx2    : "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:${versions.kotlinCoroutine}",
            protobuf              : "com.google.protobuf:protobuf-java:3.9.1",
    ]

    repositories {
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://jitpack.io' }
        maven { url "https://plugins.gradle.org/m2/" }
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://repo1.maven.org/maven2/' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath("org.openapitools:openapi-generator-gradle-plugin:5.0.0") {
            exclude group: "com.github.jknack", module: "handlebars"
            exclude group: "com.github.jknack", module: "handlebars-jackson2"
        }
    }
}

plugins {
    id "com.diffplug.spotless" version "5.7.0"
}

apply plugin: 'org.openapi.generator'


spotless {
    java {
        target '*/src/**/*.java'
        googleJavaFormat()
    }

    kotlin {
        target '*/src/**/*.kt'
        targetExclude([
                "common/src/main/kotlin/**/*.kt",
                "openapi-client/src/main/kotlin/**/*.kt",
                "openapi-server/src/main/kotlin/**/api/*Api.kt",
                "openapi-server/src/main/kotlin/**/dto/*.kt"
        ])
        ktlint('0.39.0').userData(['disabled_rules': 'no-wildcard-imports'])
    }

    format 'xml', {
        target 'app/src/main/**/*.xml'
        eclipseWtp('xml').configFile('spotless.xml.prefs')
    }

    format 'gradle', {
        target '**/*.gradle'
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

task updatePrepush(type: Exec) {
    inputs.files 'devtools/pre-push.sh'
    outputs.files '.git/hooks/pre-push'

    commandLine 'cp', '-f', inputs.files[0], outputs.files[0]
}

gradle.startParameter.taskNames = [":updatePrepush"] + gradle.startParameter.taskNames

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task buildOpenApiYaml(type: Exec) {
    inputs.files project.fileTree(dir: 'api/components')
    inputs.files project.fileTree(dir: 'api/paths')
    inputs.files 'api/openapi.yaml'
    outputs.files 'api/openapi-dist.yaml'

    commandLine 'npx', 'swagger-cli', 'bundle', 'api/openapi.yaml', '--outfile', 'api/openapi-dist.yaml', '--type', 'yaml'
}

task buildKotlinClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    dependsOn buildOpenApiYaml

    generatorName = "kotlin"
    inputSpec = "$rootDir/api/openapi-dist.yaml"
    outputDir = "$rootDir/openapi-client"
    apiPackage = "com.kms.openapi.api"
    modelPackage = "com.kms.openapi.dto"
    modelNameSuffix = "Dto"
    invokerPackage = "com.kms.openapi"
    library = "jvm-retrofit2"
    configOptions = [
            enumPropertyNaming  : "UPPERCASE",
            serializationLibrary: "gson",
            useCoroutines       : "true"
    ]
    typeMappings = [
            "java.io.File"            : "RequestBody",
            "java.time.OffsetDateTime": "java.time.Instant"
    ]
}

task buildKotlinSpring(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin-spring"
    inputSpec = "$rootDir/api/openapi-dist.yaml"
    outputDir = "$rootDir/openapi-server"
    apiPackage = "com.kms.openapi_server.api"
    modelPackage = "com.kms.openapi_server.dto"
    invokerPackage = "com.kms.openapi_server"
    modelNameSuffix = "Dto"
    configOptions = [
            enumPropertyNaming: "UPPERCASE",
            gradleBuildFile   : "false",
            interfaceOnly     : "true",
    ]
    typeMappings = [
            "java.time.OffsetDateTime": "java.time.Instant"
    ]

}

task buildOpenApi() {
    dependsOn buildKotlinClient, buildKotlinSpring, ":common:buildLeancloudClient"
}
