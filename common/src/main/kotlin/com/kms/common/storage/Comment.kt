/**
* Kms Backend
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.kms.common.storage

import com.kms.common.storage.Post

import cn.leancloud.AVException
import cn.leancloud.AVFile
import cn.leancloud.AVUser
import cn.leancloud.AVObject
import cn.leancloud.AVQuery
import cn.leancloud.EngineHook
import cn.leancloud.EngineHookType
import cn.leancloud.annotation.AVClassName
import cn.leancloud.utils.StringUtil

@AVClassName("Comment")
class Comment : AVObject() {
    companion object {
        const val CLASS = "Comment"
        const val KEY_POST = "post"
        const val KEY_AUTHOR = "author"
        const val KEY_CONTENT = "content"
        const val KEY_PARENT_COMMENT = "parentComment"

        fun AVQuery<Comment>.wherePostIs(post: Post): AVQuery<Comment> {
            return whereEqualTo(KEY_POST, post)
        }

        /**
         * Create pointer with objectId only for query.
         */
        fun newPointer(objectId: String): Comment {
            return createWithoutData(Comment::class.java, objectId)
        }

        fun newBuilder(): Builder {
            return Builder()
        }

        @Throws(IllegalArgumentException::class)
        fun validate(x: Comment): Comment {
            x.content.let {
              // Validation logic.
              require(it.length >= 1) {
                  "content length needs to be at least 1, got ${it.length}"
              }
            }
            return x
        }
    }





    /**
     * The post comment is replied to.
     */
    var post: Post
        get() {
            val value = get(KEY_POST)
            return if (value is Post) {
                value
            } else {
                getJSONObject(KEY_POST)
                    .getString(KEY_OBJECT_ID).let {
                        createWithoutData(Post::class.java, it)
                    }
            }
        }
        set(value) = put(KEY_POST, value)

    /**
     * Author of the comment.
     */
    var author: AVUser
        get() {
            val value = get(KEY_AUTHOR)
            return if (value is AVUser) {
                value
            } else {
                throw AVException(AVException.INCORRECT_TYPE, "Invalid value, expect AVUser, got ${value.javaClass}")
            }
        }
        set(value) = put(KEY_AUTHOR, value)

    /**
     * Content of the comment.
     */
    var content: kotlin.String
        get() {
            val value = get(KEY_CONTENT)
            return if (value is kotlin.String) {
                value
            } else {
                throw AVException(AVException.INCORRECT_TYPE, "Invalid value, expect kotlin.String, got ${value.javaClass}")
            }
        }
        set(value) = put(KEY_CONTENT, value)

    /**
     * Parent comment if this comment is replied to comment, otherwise set to `null`
     */
    var parentComment: Comment?
        get() {
            val value = get(KEY_PARENT_COMMENT)
            return if (value is Comment?) {
                value
            } else {
                getJSONObject(KEY_PARENT_COMMENT)
                    .getString(KEY_OBJECT_ID)?.let {
                        createWithoutData(Comment::class.java, it)
                    }
            }
        }
        set(value) = put(KEY_PARENT_COMMENT, value)


    class Builder internal constructor() {
        val value: Comment = Comment()

        fun build(): Comment {
            return Comment.validate(value)
        }

        fun setPost(post: Post): Builder {
            value.post = post
            return this
        }

        fun setAuthor(author: AVUser): Builder {
            value.author = author
            return this
        }

        fun setContent(content: kotlin.String): Builder {
            value.content = content
            return this
        }

        fun setParentComment(parentComment: Comment?): Builder {
            value.parentComment = parentComment
            return this
        }
    }
}

open class CommentHook {
    open fun onBeforeSave(x: Comment): Comment {
        return Comment.validate(x)
    }
    open fun onBeforeUpdate(x: Comment): Comment {
        return Comment.validate(x)
    }
    open fun onBeforeDelete(x: Comment): Comment {
        return Comment.validate(x)
    }
    open fun onAfterSave(x: Comment) {
    }
}

object CommentHookFunction {
    var hook = CommentHook()

    @JvmStatic
    @EngineHook(className = Comment.CLASS, type = EngineHookType.beforeSave)
    fun onBeforeSave(x: Comment): Comment {
        return hook.onBeforeSave(x)
    }

    @JvmStatic
    @EngineHook(className = Comment.CLASS, type = EngineHookType.beforeUpdate)
    fun onBeforeUpdate(x: Comment): Comment {
        return hook.onBeforeUpdate(x)
    }

    @JvmStatic
    @EngineHook(className = Comment.CLASS, type = EngineHookType.beforeDelete)
    fun onBeforeDelete(x: Comment): Comment {
        return hook.onBeforeDelete(x)
    }

    @JvmStatic
    @EngineHook(className = Comment.CLASS, type = EngineHookType.afterSave)
    fun onAfterSave(x: Comment) {
        return hook.onAfterSave(x)
    }
}
