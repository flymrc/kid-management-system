/**
* Kms Backend
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.kms.common.storage

import com.kms.common.storage.Post

import cn.leancloud.AVException
import cn.leancloud.AVFile
import cn.leancloud.AVUser
import cn.leancloud.AVObject
import cn.leancloud.AVQuery
import cn.leancloud.EngineHook
import cn.leancloud.EngineHookType
import cn.leancloud.annotation.AVClassName
import cn.leancloud.utils.StringUtil

@AVClassName("PostReaction")
class PostReaction : AVObject() {
    companion object {
        const val CLASS = "PostReaction"
        const val KEY_POST = "post"
        const val KEY_AUTHOR = "author"
        const val KEY_EMOJI = "emoji"

        fun AVQuery<PostReaction>.wherePostIs(post: Post): AVQuery<PostReaction> {
            return whereEqualTo(KEY_POST, post)
        }

        /**
         * Create pointer with objectId only for query.
         */
        fun newPointer(objectId: String): PostReaction {
            return createWithoutData(PostReaction::class.java, objectId)
        }

        fun newBuilder(): Builder {
            return Builder()
        }

        @Throws(IllegalArgumentException::class)
        fun validate(x: PostReaction): PostReaction {
            return x
        }
    }



    enum class Emoji(val value: kotlin.String) {
        THUMBUP("thumbup"),
    }

    var post: Post
        get() {
            val value = get(KEY_POST)
            return if (value is Post) {
                value
            } else {
                getJSONObject(KEY_POST)
                    .getString(KEY_OBJECT_ID).let {
                        createWithoutData(Post::class.java, it)
                    }
            }
        }
        set(value) = put(KEY_POST, value)

    var author: AVUser
        get() {
            val value = get(KEY_AUTHOR)
            return if (value is AVUser) {
                value
            } else {
                throw AVException(AVException.INCORRECT_TYPE, "Invalid value, expect AVUser, got ${value.javaClass}")
            }
        }
        set(value) = put(KEY_AUTHOR, value)

    /**
     * Reaction of the post.
     */
    var emoji: Emoji
        get() = Emoji.values().find { it.value == getString(KEY_EMOJI) }!!
        set(value) = put(KEY_EMOJI, value.value)


    class Builder internal constructor() {
        val value: PostReaction = PostReaction()

        fun build(): PostReaction {
            return PostReaction.validate(value)
        }

        fun setPost(post: Post): Builder {
            value.post = post
            return this
        }

        fun setAuthor(author: AVUser): Builder {
            value.author = author
            return this
        }

        fun setEmoji(emoji: Emoji): Builder {
            value.emoji = emoji
            return this
        }
    }
}

open class PostReactionHook {
    open fun onBeforeSave(x: PostReaction): PostReaction {
        return PostReaction.validate(x)
    }
    open fun onBeforeUpdate(x: PostReaction): PostReaction {
        return PostReaction.validate(x)
    }
    open fun onBeforeDelete(x: PostReaction): PostReaction {
        return PostReaction.validate(x)
    }
    open fun onAfterSave(x: PostReaction) {
    }
}

object PostReactionHookFunction {
    var hook = PostReactionHook()

    @JvmStatic
    @EngineHook(className = PostReaction.CLASS, type = EngineHookType.beforeSave)
    fun onBeforeSave(x: PostReaction): PostReaction {
        return hook.onBeforeSave(x)
    }

    @JvmStatic
    @EngineHook(className = PostReaction.CLASS, type = EngineHookType.beforeUpdate)
    fun onBeforeUpdate(x: PostReaction): PostReaction {
        return hook.onBeforeUpdate(x)
    }

    @JvmStatic
    @EngineHook(className = PostReaction.CLASS, type = EngineHookType.beforeDelete)
    fun onBeforeDelete(x: PostReaction): PostReaction {
        return hook.onBeforeDelete(x)
    }

    @JvmStatic
    @EngineHook(className = PostReaction.CLASS, type = EngineHookType.afterSave)
    fun onAfterSave(x: PostReaction) {
        return hook.onAfterSave(x)
    }
}
