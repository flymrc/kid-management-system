/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.kms.openapi_server.api

import com.kms.openapi_server.dto.CommentDto
import com.kms.openapi_server.dto.CommentFindResultDto
import com.kms.openapi_server.dto.PostDto
import com.kms.openapi_server.dto.PostExtendedDto
import com.kms.openapi_server.dto.PostFindResultDto
import com.kms.openapi_server.dto.PostReactionDto
import com.kms.openapi_server.dto.PostReactionListResultDto
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.Valid
import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:}")
interface PostApi {


    @GetMapping(
            value = ["/post/find"],
            produces = ["application/json"]
    )
    fun postFindGet(@NotNull  @RequestParam(value = "sortBy", required = true) sortBy: kotlin.String
, @RequestParam(value = "before", required = false) before: java.time.Instant?
, @RequestParam(value = "after", required = false) after: java.time.Instant?
, @RequestParam(value = "limit", required = false) limit: kotlin.Int?
, @RequestParam(value = "parentPostId", required = false) parentPostId: kotlin.String?
, @RequestParam(value = "development", required = false, defaultValue="false") development: kotlin.Boolean
): ResponseEntity<PostFindResultDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @GetMapping(
            value = ["/post/{id}"],
            produces = ["application/json"]
    )
    fun postIdGet( @PathVariable("id") id: kotlin.String
): ResponseEntity<PostExtendedDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @GetMapping(
            value = ["/post/{pid}/comment/find"],
            produces = ["application/json"]
    )
    fun postPidCommentFindGet( @PathVariable("pid") pid: kotlin.String
, @RequestParam(value = "before", required = false) before: java.time.Instant?
, @RequestParam(value = "after", required = false) after: java.time.Instant?
, @RequestParam(value = "limit", required = false) limit: kotlin.Int?
): ResponseEntity<CommentFindResultDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @PostMapping(
            value = ["/post/{pid}/comment"],
            produces = ["application/json"],
            consumes = ["application/x-www-form-urlencoded"]
    )
    fun postPidCommentPost( @PathVariable("pid") pid: kotlin.String
, @RequestParam(value="authorId", required=true) authorId: kotlin.String 
, @RequestParam(value="content", required=true) content: kotlin.String 
, @RequestParam(value = "parentCommentId", required = false) parentCommentId: kotlin.String?
): ResponseEntity<CommentDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @GetMapping(
            value = ["/post/{pid}/reaction"],
            produces = ["application/json"]
    )
    fun postPidReactionGet( @PathVariable("pid") pid: kotlin.String
,@NotNull  @RequestParam(value = "userId", required = true) userId: kotlin.String
): ResponseEntity<PostReactionListResultDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @DeleteMapping(
            value = ["/post/{pid}/reaction/{id}"],
            produces = ["application/json"]
    )
    fun postPidReactionIdDelete( @PathVariable("pid") pid: kotlin.String
, @PathVariable("id") id: kotlin.String
): ResponseEntity<kotlin.Boolean> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @PostMapping(
            value = ["/post/{pid}/reaction"],
            produces = ["application/json"],
            consumes = ["application/x-www-form-urlencoded"]
    )
    fun postPidReactionPost( @PathVariable("pid") pid: kotlin.String
, @RequestParam(value="userId", required=true) userId: kotlin.String 
, @RequestParam(value="emoji", required=true) emoji: kotlin.String 
): ResponseEntity<PostReactionDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @PostMapping(
            value = ["/post"],
            produces = ["application/json"],
            consumes = ["application/x-www-form-urlencoded"]
    )
    fun postPost( @RequestParam(value="authorId", required=true) authorId: kotlin.String 
, @RequestParam(value="title", required=true) title: kotlin.String 
, @RequestParam(value="content", required=true) content: kotlin.String 
, @RequestParam(value = "parentPostId", required = false) parentPostId: kotlin.String?
, @RequestParam(value = "development", required = false, defaultValue="false") development: kotlin.Boolean
): ResponseEntity<PostDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
